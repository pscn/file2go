package main

import (
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path"
	"strings"

	"github.com/pscn/file2go/encode"
	"github.com/pscn/file2go/template"
)

var (
	output = flag.String("output", "", "the target file name")
	pkg    = flag.String("pkg", "",
		"package name to use, defaults to the base directory of target")
	verbose = flag.Bool("verbose", false, "be more verbose")
	devel   = flag.Bool("devel", false, "internal â†’ use the template files, "+
		"not the ones generated by file2go\n"+
		"only required when compiling the templates themselves")
)

// Usage shows a short usage summary on stderr
func Usage(msg string) {
	if msg != "" {
		fmt.Fprintf(os.Stderr, "%s\n", msg)
	}
	fmt.Fprintf(os.Stderr, "Usage of file2go:\n")
	fmt.Fprintf(os.Stderr, "\tfile2go -output target/file.go -pkg mypkg file1 file2 file3\n")
	fmt.Fprintf(os.Stderr, "Flags:\n")
	flag.PrintDefaults()
}

// FlagUsage shows a short usage summary on stderr
func FlagUsage() {
	Usage("")
}

func main() {
	log.SetFlags(0) // log.LstdFlags | log.Lshortfile)
	log.SetPrefix("file2go: ")
	flag.Usage = FlagUsage
	flag.Parse()
	if len(flag.Args()) == 0 {
		Usage("please specify one or more files")
		os.Exit(2)
	}
	if *output == "" {
		Usage("please specify output")
		os.Exit(2)
	}
	if *pkg == "" {
		*pkg = path.Base(path.Dir(*output))
	}
	container := make([]template.File, len(flag.Args()))
	var err error
	for i, filename := range flag.Args() {
		container[i] = template.File{Name: filename}
		container[i].Content, err = encode.File(filename)
		if err != nil {
			log.Fatalf("failed to encode file: filename=%s, error=%s", filename, err)
		}
	}

	tmpl, err := template.Execute(&container, strings.Join(os.Args[1:], " "),
		*pkg, *devel)
	if err != nil {
		log.Fatalf("failed to generate code: %s\n", err)
	}

	if _, err := os.Stat(*output); err == nil { // file exists
		data, err := ioutil.ReadFile(*output)
		if err != nil {
			log.Fatalf("failed to read old file: %s; error=%s", *output, err)
		}
		if string(data) == string(*tmpl) {
			if *verbose {
				log.Printf("already up to date: %s", *output)
			}
			os.Exit(0)
		}
	}
	file, err := os.Create(*output)
	if err != nil {
		log.Fatalf("failed to open file: %s\n", err)
	}
	defer file.Close()
	_, err = file.Write(*tmpl)
	if err != nil {
		log.Fatalf("failed to write code to file: %s; error=%s", *output, err)
	}

}
