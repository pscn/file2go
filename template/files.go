// Code generated by "file2go -v -d -t -o template/files.go template/*.tmpl"; DO NOT EDIT.

// Encoded files:
// → template/files.tmpl
// → template/files_test.tmpl

package template

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io/ioutil"
	"log"
)

var container map[string]*[]byte
var filenames []string

// decode the base64Encoded string and return a *[]byte for the decoded data
func decode(base64Encoded string) *[]byte {
	gzipEncoded, err := base64.StdEncoding.DecodeString(base64Encoded)
	if err != nil {
		log.Panicf("failed to decode data(BASE64): %s", err)
	}

	var buf bytes.Buffer
	_, err = buf.Write(gzipEncoded)
	if err != nil {
		log.Panicf("failed buffer decode data: %s", err)
	}

	zr, err := gzip.NewReader(&buf)
	if err != nil {
		log.Panicf("failed to create reader from buffer: %s", err)
	}
	defer zr.Close()

	decoded, err := ioutil.ReadAll(zr)
	if err != nil {
		log.Panicf("failed to decode data(GZIP): %s", err)
	}

	return &decoded
}

func init() {
	container = make(map[string]*[]byte)

	filenames = append(filenames, "template/files.tmpl")
	container["template/files.tmpl"] = decode(`` +
		`H4sICAAAAAAA/2RHVnRjR3hoZEdWY1ptbHNaWE11ZEcxd2JBPT0AnFRRi+M2EH62fs` +
		`XUcIddgg1lucIeedjbTcs9dG/pHhQaQlGikU/ElowsX7kYvfYH9Cf2l5SRFSXZtKXt` +
		`S4JHmvm+b+Yb1TXcG4HQoEbLHQrYfoFcqha/aQxMU3Vnm7FD7Qbv87fw8AEeP3yE1c` +
		`P7jxVjdQ0rvTMCBVDGcMumyXLdIFT3RjuuNFrv6xr++O13qvXIO/SeTRNq4T3r+W7P` +
		`G6STp33jPWOq6411ULAs335xOOQsy3em6y0OQ90cVE8BJEilm3rLB3xzQyHZOfpTpl` +
		`ZmdKqlj9Y0OSsZ+8wt7I5soOP9enBW6Wbz9XpDIOEC0de8wwHWm/k4qBNI6sB9QpjB` +
		`jnLnO8C1AItutBo4xHogjQ0Zc7IAwR1nctS7GCn+qlSZ0ieWkdJ4vAC0Fm6XEb96dm` +
		`IV9VcPodxzyL8sWrJMyZD51RK0aqlo1pqmeuJa7WSRS65aFODMUSKRLN7dPa/e3JS3` +
		`8GrIA3DJMs9YRh3ajhLCTKp3o5RoWfbLzG1JR9VPVjkszoj/WwrbUO2cxhX8waYuEE` +
		`D1iL/+iFygLV5vR/kftO4scodgQzJIa7oI/wIyE0icDra6b82ARckodDmP2WgVEblr` +
		`2+Jg/2fPv//5/dN1x6OpXkdU5tnsIKWVK0oqfbL0Ejq+x+La2SWbJrjeR5ad3L4E3v` +
		`eoRZFCC8jTpublGc76LL6B5dHMx40v7j+Nej8DoXbw7U3p/TRV9BPWvZwmQC3Ae1IT` +
		`3p355nFfGvUZddrEWW+8k+ilbSmixtA0Y0NLlAyLjtotwOxpSCfyxwKbt3REo4ktTh` +
		`latWH2Ma5VuwDZuWpF9Wl88U18NYA2xHrUIl8kvuWlqh/G4e+ULaAnRwygZIqdSl7o` +
		`pirX2s9eisQ+uvJlv/7ZlEUy/GUzopTvkk3m4yGImSNGho/w7MPgjMXIPCUVZXpLCT` +
		`UiJJ9FDDSS/RkAAP//KTRvZ4QGAAA=`)
	filenames = append(filenames, "template/files_test.tmpl")
	container["template/files_test.tmpl"] = decode(`` +
		`H4sICAAAAAAA/2RHVnRjR3hoZEdWY1ptbHNaWE5mZEdWemRDNTBiWEJzAKRSvW7bMB` +
		`Cexae4EAgiN4ZUdFTgoYgToEOdDt6aImDFo0xEIg2SclsIXPsAfcQ+SXGyYyux3B90` +
		`s8X7fu/yHK6tRKjQoBMBJXz+BlzpGt9UFroue+uqtkETfIz8CuZ3sLhbws383TJjLM` +
		`9hiT5oU4GyDrQp61aiBIL7gnWdE6ZCyK6tCUIbdDHmOfz8/oOIF6LBGFnXoZExsrUo` +
		`H0WF9PLhsYqRMd2srQuQsoSHrQpnE8ZUa8pelljRhLlFv7Dh5qv2IQ3wajebLSfQse` +
		`RhCugcFDPYjaecT1iiVf95NgOja5pLQnYrgqhVyneDBTgMrTMowViato6QkcVjD724` +
		`P1bfCNfr9OjRPvYOBwb35Qycnv3GKdwfIPccjA2gbGtkAeee9+zk+6noEfvvW/+HGi` +
		`UqdEC4tP9PtvpWHZZ2gy6dXMGzOo9dkkgBfmXbWsJKbBDWwujyQlLKJLIkphOWPByK` +
		`IMB2W//EdSLffwU7++tgVP6JcCfW/zLwYPtjK7vVNRrR4Mi1qacn8n+YoyOiL6/HDW` +
		`gFe+BH/YmyDjy8uLg9awGN9o0I5QoqG+Di3F/AF2G2v/iUihqyTuH5VZPu5eUgX54D` +
		`WsV+BQAA///VaSc9jwQAAA==`)
}

// Content for the given filename
func Content(filename string) (*[]byte, error) {
	if content, ok := container[filename]; ok {
		return content, nil
	}
	return nil, fmt.Errorf("file2go %s not found", filename)
}

// ContentMust for the given filename, panics if filename not found
func ContentMust(filename string) *[]byte {
	content, err := Content(filename)
	if err != nil {
		log.Panic(err)
	}
	return content
}

// Filenames returns the names of the files stored
func Filenames() []string {
	return filenames
}

// eof
