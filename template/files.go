// Code generated by "file2go -verbose -output template/files.go template/files.tmpl template/files_test.tmpl"; DO NOT EDIT.

// Encoded files:
// → template/files.tmpl
// → template/files_test.tmpl

package template

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io/ioutil"
	"time"
)

// file stores the content and modTime of the decoded string
type file struct {
	content *[]byte
	modTime *time.Time
}

var container map[string]*file

// Init populates *file with data decoded from base64Encoded string
func decode(base64Encoded string) (*file, error) {
  gzipEncoded, err := base64.StdEncoding.DecodeString(base64Encoded)
	if err != nil {
		return nil, fmt.Errorf("failed to decode data(BASE64): %s", err)
	}

	var buf bytes.Buffer
	_, err = buf.Write(gzipEncoded)
	if err != nil {
		return nil, fmt.Errorf("failed buffer decode data: %s", err)
	}

	zr, err := gzip.NewReader(&buf)
	if err != nil {
		return nil, fmt.Errorf("failed to create reader from buffer: %s", err)
	}
	defer zr.Close()

  decoded, err := ioutil.ReadAll(zr)
	if err != nil {
		return nil, fmt.Errorf("failed to decode data(GZIP): %s", err)
	}

	return &file{
		content: &decoded,
		modTime: &zr.ModTime,
	}, nil
}

func init() {
  container = make(map[string]*file)
  var err error
  
  container["template/files.tmpl"], err = decode(`` +
    `H4sICI55slwA/1ptbHNaWE11ZEcxd2JBPT0ArJTfauNGFMavNU9xKtggBSNBCVvw4o` +
    `usY0ouNrs0gUKDKWPpjDJYmhGjUZdYzG0foI/YJylnNFK9jpfSkJvE0mi+8zvf+ZPn` +
    `sNYlQoUKDbdYwu4ZYiFr/LHSMAzZtan6BpXtnIs/wM1nuPv8AJub24eMsTyHjSp0iS` +
    `XQjW7JhsFwVSFka60slwqNc3kOf//5F2nd8QadY8OAqnSOtbzY8wrp5Mu+co4x2bTa` +
    `WEhYFO+eLXYxi+JCN63Brsurg2zpBVJIqap8xzt8f0WvRGPpn9S51L2VNT1Y2WDMUk` +
    `9JdNBZbbAD+4RQaGVRWeCqhEaXD7JB0MIflTgm1FkjVcXsc4vTddMXFgYWTbcvH7dE` +
    `yaJJ4pJiZvSTOcb+4MYH8jZAw9vHUXN7SXqe61ZJC61u+5pb7MAfwFdpn6Dkls8swu` +
    `gGxmwnvwOe6FURPkvOfZBC4kUXgMZokxI++Ri+8q9huQri2b0tN8Hd7Mar3nuZb7VT` +
    `Fknhb/6wAiVrEo0M2t4oelyAaGy2oXgiiQWXNZZgdcD0mSUfr+8376/SJbzrYg+Rss` +
    `gxFpFnu16Ar372sRcCDYt+HzlXdJT9aqTF5CiJ1+DsvPIx0guUg5ndoWDZHX79BXmJ` +
    `JrnY9eKVHhQGuUUwXijU1aOchI9KJL6Dyda17jBJGb36tmZjq2cEdV3XycG8QV1+/u` +
    `32y8uqBI0L6iTSDAOwhIuJiUXTECzh4mCyT+PDgkVuQbFpHnyvSiVtkk5TNI7GChq+` +
    `x+R0QtKxHSgf37wsGgZ4uV6OlB7jecnE26lnwnRMmylZP/VqPyrQEP90lTo3DBn98W` +
    `vprIstV7JIgiPDAKhKcG7OKoglhK14g0fTN+6I4/mTAsaR1Hsq47/00+3tBzo6Kh4d` +
    `ZMH00U5qke9WNizvdx0obUHoXpXxAib19JT6U9+dIQ/gR/tubrzTbP/bsRk2SM0IoU` +
    `/OGTfv0jfwLvTmG3oXwL/j3cxOJHPwYN9pzv/DviBFFHkOqAX7JwAA//9BmawjwAcA` +
    `AA==`)
  if err != nil {
  	panic(err)
  }
  container["template/files_test.tmpl"], err = decode(`` +
    `H4sICJp2slwA/1ptbHNaWE5mZEdWemRDNTBiWEJzAKRTQWvbMBg9R6D/8FUw5oxhw4` +
    `4pPXRNBzs03SHHQtGsz46oLWWSHDaMrvsB+4n7JUOqSdzUTj1yM/L73vfe01OWwY0W` +
    `CCUqNNyhgO+/gBWywk+lhrZNr03Z1Kic9Z5dwvIeVvdruF1+XaeUUJJlsEbrpCqh0A` +
    `akyqtGoIBAYBeUtK3hqkRIb7RyXCo03mcZ/P39J3CveI3eBxQqET62PH/iJYZ/357K` +
    `cEKJrLfaOEgomTH3vItRMg+/ikblcX9gR+WWGu1Ku9uf0rrEwYcOnq7n0FIye/wIaA` +
    `wsrqDDJ4zNKZnJIp5fXYGSVUTOXPqFO14VCeugCzDoGqNQgNIBrk2c9ZT4ISlRg30t` +
    `AmDHTVwXOYbyOSjtCd2n1Vd8cUoxPByGHhgo7aDQjRILeGdZ5I/699kP2rhr7FupCi` +
    `zQQBhMng+CupiywVzv0CTzS3iZ7muxYc8C7EY3lYAN3yFsuZL5exHthpRnPgmfj4dQ` +
    `wkx3g//HN+r0TIsX0y2G2xi1OVaKY+u9Tozc4p0Wa1nj9cnH0IGmPIYOevoxHG//PG` +
    `07N05al9l8gzVP7Y/q7abv5bxo9KCIkNhQDOe1t0c+ub29mYQpHeBHHZ7COmJxKOvz` +
    `2jsk5mR7h2wO3q2n5F8AAAD//2s0MTJ+BgAA`)
  if err != nil {
  	panic(err)
  }
}

func Content(filename string) (*[]byte, error) {
  if file, ok := container[filename]; ok {
    return file.content, nil
  }
  return nil, fmt.Errorf("file2go %s not found", filename)
}

func ContentMust(filename string) *[]byte {
	content, err := Content(filename)
	if err != nil {
		panic(err)
	}
	return content
}

func ModTime(filename string) (*time.Time, error) {
  if file, ok := container[filename]; ok {
    return file.modTime, nil
  }
  return nil, fmt.Errorf("file2go %s not found", filename)
}

func ModTimeMust(filename string) *time.Time {
	modTime, err := ModTime(filename)
	if err != nil {
		panic(err)
	}
	return modTime
}

// eof