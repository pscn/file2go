// Code generated by "file2go -v -d -t -o template/files.go template/*.tmpl"; DO NOT EDIT.

// Encoded files:
// → template/files.tmpl
// → template/files_test.tmpl

package template

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io/ioutil"
)

var container map[string]*[]byte

// decode the base64Encoded string and return a *[]byte for the decoded data
func decode(base64Encoded string) (*[]byte, error) {
	gzipEncoded, err := base64.StdEncoding.DecodeString(base64Encoded)
	if err != nil {
		return nil, fmt.Errorf("failed to decode data(BASE64): %s", err)
	}

	var buf bytes.Buffer
	_, err = buf.Write(gzipEncoded)
	if err != nil {
		return nil, fmt.Errorf("failed buffer decode data: %s", err)
	}

	zr, err := gzip.NewReader(&buf)
	if err != nil {
		return nil, fmt.Errorf("failed to create reader from buffer: %s", err)
	}
	defer zr.Close()

	decoded, err := ioutil.ReadAll(zr)
	if err != nil {
		return nil, fmt.Errorf("failed to decode data(GZIP): %s", err)
	}

	return &decoded, nil
}

func init() {
<<<<<<< HEAD
  container = make(map[string]*file)
  var err error
  
  container["template/files.tmpl"], err = decode(`` +
    `H4sICLq1sFwA/1ptbHNaWE11ZEcxd2JBPT0ArFRRa+Q2EH62fsXUcMEOiw0lXGGPfc` +
    `htlpKHyx1NoNCwFK09csTakpHlHlmj1/6A/sT+kjKy7Nvb7D005CVZa6Rvvvnmm8lz` +
    `WOsSoUKFhlssYfcMsZA1/lxpGIbs2lR9g8p2zsUf4OYz3H1+gM3N7UPGWJ7DRhW6xB` +
    `LoRbdkw2C4qhCytVaWS4XGuTyHf//+h7DueIPOsWFAVTrHWl7seYUU+bKvnGNMNq02` +
    `FhIWxbtni13MorjQTWuw6/LqIFs6QEopVZXveIfvr+hINJb+SZ1L3VtZ04eVDcYs9S` +
    `yJHXRWG+zAPiEUWllUFrgqodHlg2wQtPChEseCOmukqph9bnF6bvrCwsCi6fXl45ZY` +
    `smiCuKScGf1kjrG/uPGJvAzQ8PZxxNxeEp7ndaukhVa3fc0tduAD8FXaJyi55TMXYX` +
    `QDY7WT3oGe6FURriXnLqSQeNAFoDHapDAwABIyXPPnsFwF9Ozelpsgb3bjYe89zvfg` +
    `KYuk8C9/WoGSNYkSGbS9UfS5ANHYbEMJRRILLmsswerA05eWfLy+37y/Spfwros9iZ` +
    `RFjrGIRNv1Anz7s4+9EGhY9OfIc0Wh7HcjLSZHRbyGzs4jH1N6QeVgZnUoWXaHX39D` +
    `XqJJLna9eKUGhUFuEYwHCo31VE7SRyUSv4PJ1rXuMEkZg8kPM63R7Bmxuq7r5GDeoD` +
    `G//nH75WVbAsYFeYkwwwgs4WLixKJpDJZwcTDZp/FjwSK3oNw0Ed6tUkmbjEb8Nh0r` +
    `aPgek9MhSRkAOYIq8gZmAMMAL3fMMdhjPK+aeDsZJ8zItJ+S9VOv9iMEjfIvV6lzw5` +
    `DRH7+cKPOplABRy5UsEq8LgBsGQFWCc3NxAS8h8oo3eDSG47L4bhClgHE49Z7a+a2C` +
    `6fn2A4XoKkBoAYWyIP8oLACV/8Muh1X+rgOlLQjdqzJewJQhPaX+qe/O0A/sj7bfbM` +
    `LTks968Eg3MncgG6BmCsEz59SbN+vbCBis+qYCBvY/EHAugPSY0wcNTwv/HxoGKGKR` +
    `54Ba/BcAAP//O8qa8NIHAAA=`)
  if err != nil {
  	panic(err)
  }
=======
	container = make(map[string]*[]byte)
	var err error
	
	container["template/files.tmpl"], err = decode(`` +
    `H4sICAAAAAAA/2RHVnRjR3hoZEdWY1ptbHNaWE11ZEcxd2JBPT0ArFTRatw6EH22vm` +
    `KuIUG+LDZcQi4k7EOyWUoemoQmUGhYinY1csTa0iLLKVmj135AP7FfUiTLm91s0kLo` +
    `iw0jzdE5M2emKGCiOUKJCg2zyGH+BKmQFf5Xaui6/MyUbY3KNs6lp3BxDVfXdzC9uL` +
    `zLCSkKmKqF5sjBZzQnpOsMUyVCPtHKMqnQOFcU8PP7D491xWp0jnQdKu4cWbHFkpXo` +
    `T26WpXOEyHqljQVKknT+ZLFJSZIudL0y2DRFuZYrH0D/pFRlMWcNHh/5kKit/0ldSN` +
    `1aWaUkI+SRGVgMNKBmq/vGGqnK2b/3M48e+HP0/ME+IPRwg6D+LjDFwaBtjQIGMRGE` +
    `NiGjT+bAmWVEtGoRI/Q1qAxozB8BGqNNBh1JvKh4L4ThZByJ5LeWT6PU/CLg3gagXf` +
    `SMJFKEzH/GoGTlQZPIWMlqBKK2+dS/J2gqmKyQg9WDbs+cnp/dTo+PshM4aNJAIiOJ` +
    `IyTxBZy3AkIr8vNWCDQk+drzHPuj/LORFumWiPfQmQfkbUp7VNZmUx3/WH6F3z4h42` +
    `jo4bwV76zBwiCzCCYAgTC6jlRePJ9w9PzWJp9UukGaER/a7Vnvu9yTOqsqujZ/oS8f` +
    `vlze7HclYhxuGChZEUd6/0klLQ3Genb+GGq2RLo/AFnfYs8xGJIkXQf787uFdZ9upj` +
    `idDT6Inh9Gn04eWrXsEVBZ+P8oc67rcv8Jc/9qZVZMyQWNKrsOUHFwzusKG6qHGuau` +
    `lI+owspRrMZeebxDh+hvp06KsBlQ2RHope/fs8QBYHbqj7a6tsnwBfe2eLObcXseNK` +
    `C0Z90qno42fLNdVR/b5i1lIwhlaUCKTewZcke3R9nXPiys6IfAPhr2Zb3+3BXyohBR` +
    `BmpBfgUAAP//AGBoyEYGAAA=`)
	if err != nil {
		panic(err)
	}
	container["template/files_test.tmpl"], err = decode(`` +
    `H4sICAAAAAAA/2RHVnRjR3hoZEdWY1ptbHNaWE5mZEdWemRDNTBiWEJzAKRSTWsbMR` +
    `A9r0D/4UVQui5lF3rc4EOJU+ihTg8+BoK6mt2IrCUjaU3Lomt/QH9if0mRYmKntvtB` +
    `bmL05s17b6aucWUVoSdDTgZS+PINotMDvestpql67/pxTSb4GMUlFjdY3qxwvfi4qj` +
    `jjrK6xIh+06dFZB23aYVSkkAh8w9k0OWl6QnVlTZDakIuxrvHz+4/EvZRrijGhyKj0` +
    `2Mj2QfaU/j4/9KnCmV5vrAsoOStEeJwlOJulr240bZ6f2MmEhSW/tOH6q/ahDHizg1` +
    `erGSbOiru3IOfQzLHDl0LMOCt0l+vzOYweMrII1QcZ5NCVYgdt4CiMzpCCsQluXe6N` +
    `nMVTUrIGfywC2EqXx2WOU/nslR4IfUrrUPHFnxTjdt90K2BsQGdHoxq88iLzZ/1P2Z` +
    `+08Wn0f0tVUUcOqbF8LCR1OWVHrd2SK2eXeJ7usdg0p4G/t+OgcC+3hI00un2tst2U` +
    `chHL9Lzbh5J6dhv8P76zTl9o8eLfLaZtnLV57ih+t35wE8+3WNcg23H2KwAA//8qp6` +
    `S53QMAAA==`)
	if err != nil {
		panic(err)
	}
>>>>>>> devel
}

// Content for the given filename
func Content(filename string) (*[]byte, error) {
	if content, ok := container[filename]; ok {
		return content, nil
	}
	return nil, fmt.Errorf("file2go %s not found", filename)
}

// ContentMust for the given filename, panics if filename not found
func ContentMust(filename string) *[]byte {
	content, err := Content(filename)
	if err != nil {
		panic(err)
	}
	return content
}

// eof
