// Code generated by "file2go {{.Arguments}}"; DO NOT EDIT.

// Testing for included files:
{{range .Container}}// â†’ {{.Name}}
{{end}}
package {{.Pkg}}

import (
	"testing"
)

func TestContentDoesNotExist(t *testing.T) {
	_, err := Content("")
	if err == nil {
		t.Fatalf("Content: returned no error")
	}
}

func TestContentExists(t *testing.T) {
  var err error{{range .Container}}
	_, err = Content("{{.Name}}")
	if err != nil {
		t.Fatalf("Content \"{{.Name}}\" not found: %s", err)
	}{{end}}
}

func TestContentMustDoesNotExist(t *testing.T) {
	defer func() {
		if r := recover(); r == nil {
			t.Fatalf("ContentMust: should have panic'd")
		}
	}()
	_ = ContentMust("")
	t.Fatalf("ContentMust: should have panic'd")
}

func TestContentMustExist(t *testing.T) {
	defer func() {
		if r := recover(); r != nil {
			t.Fatalf("ContentMust: should not have panic'd")
		}
	}(){{range .Container}}
	_ = ContentMust("{{.Name}}"){{end}}
}

func TestModTimeA(t *testing.T) {
	_, err := ModTime("")
	if err == nil {
		t.Fatalf("ModTime: returned no error")
	}
}
func TestModTimeB(t *testing.T) {
	_, err := ModTime("artist/schema.sql")
	if err != nil {
		t.Fatalf("ModTime: %s", err)
	}
}
func TestModTimeMustA(t *testing.T) {
	defer func() {
		if r := recover(); r == nil {
			t.Fatalf("ModTimeMust: should have panic'd")
		}
	}()
	_ = ModTimeMust("nohave")
	t.Fatalf("ModTimeMust: should have panic'd")
}
func TestModTimeMustB(t *testing.T) {
	defer func() {
		if r := recover(); r != nil {
			t.Fatalf("ModTimeMust: should not have panic'd")
		}
	}()
	_ = ModTimeMust("artist/schema.sql")
}
